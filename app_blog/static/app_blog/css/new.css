
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
/* ===== КОНТЕКСТНЫЕ СЕЛЕКТОРЫ (Layout/расположение) ===== */
/* 1. Основной контейнер шапки - ТОЛЬКО layout */
.page-header {
    background-color: #c3c370; /* Цвет фона шапки - C25100 - темно-оранжевый */
    display: flex; /* Включаем Flexbox для выравнивания дочерних элементов. Его дочерние элементы (ссылка с логотипом
    <a> и заголовок <h1>) автоматически становятся flex-элементами и выстраиваются в ряд (по умолчанию) по горизонтали.
    Без этого свойства логотип и заголовок стояли бы друг под другом (как блочные элементы).  */
    align-items: center; /* Выравниваем лого и заголовок по вертикали по центру. Иначе логотип (как изображение) и
    текст выровнялись бы по нижнему краю */
    justify-content: space-between; /* Распределяем пространство между элементами. Первый - в начале, последний - в конце, остальные по центру */
    gap: 50px; /* Добавляем промежуток 50px между логотипом и заголовком
    Без gap это выглядело бы так: [Логотип]________[Заголовок]________[Навигация]. Пробелы между ними были бы равны, но прижатие к краям — строгое
    Gap - это уточняющая команда. Говорит: "Теперь, независимо от того, что сделал space-between, добавь фиксированный промежуток
    в 50px МЕЖДУ КАЖДОЙ ПАРОЙ элементов по горизонтали и имеем: [ (Пустое пространство) Логотип ] [50px] [ Заголовок ] [50px] [ Навигация (Пустое пространство) ]*/
    margin: 0;
    padding: 20px 20px 20px 50px; /* Внутренние отступы: сверху-справа-снизу-слева
          padding: 20px    20px    20px    50px;
                 │        │        │        │
                 │        │        │        └── Четвертая цифра: левый отступ (padding-left) = 40px
                 │        │        │
                 │        │        └── Третья цифра: нижний отступ (padding-bottom) = 20px
                 │        │
                 │        └── Вторая цифра: правый отступ (padding-right) = 20px
                 │
                 └── Первая цифра: верхний отступ (padding-top) = 20px*/
}

/* 2. Контейнер навигации - layout навигационных элементов */
.navigation {
    display: flex; /* Включаем Flexbox и для всего в навигации display: flex располагает все его прямые дочерние элементы по горизонтали:
     <ul> nav-list и <div> language-switcher ? */
    gap: 1.5rem; /* Очень удобное свойство! Добавляет расстояние между двумя дочерними блоками (<ul> и <div>) */
    align-items: center;     /* Выравниваем элементы по центру по вертикали */
}

/* 3. Список навигации - layout пунктов меню */
.nav-list {
    list-style: none; /* убирает маркеры (точки) и все? */
    padding: 0; /* установив в .navigation align-items: center, padding не сдвигает сохраняет место на основании данной настройки ? */
    margin: 0;  /* установив в .navigation align-items: center, padding не сдвигает сохраняет место на основании данной настройки ? */
    display: flex;           /* Горизонтальное меню - не сработало - все дочерние элементы расположились по вертикали ?  */
    gap: 15px;               /* Расстояние между пунктами меню */
}

/* 4. Контейнер переключения языка - layout флагов */
.language-switcher {
    display: flex;
    gap: 10px;               /* Расстояние между флагами */
}

/* ===== ГРУППОВЫЕ СЕЛЕКТОРЫ (Внешний вид/стилизация) ===== */

/* 1. Ссылка логотипа */
.logo-link {
    display: inline-block; /* позволяет применять к ссылке как к блоку такие свойства, как width, height, padding,
    margin (по вертикали) и border-radius. Если не указать: Ссылка останется строчным элементом - если внутри нее
    картинка или текст, border-radius и transform могут работать некорректно (например, transform не работает */
    border: solid 6px white;
    border-radius: 30px; /* Для красоты и современного вида, чтобы убрать острые углы у логотипа или его фона.
    Если не указать: Углы элемента останутся острыми (90 градусов)*/
    transition: transform 0.3s ease; /* Указывает браузеру, что изменение свойства transform должно происходить
    не мгновенно, а плавно, в течение 0.3 секунды (300 миллисекунд), с функцией замедления ease (начинается и
    заканчивается анимация медленно, в середине ускоряется). Если не указать: Эффект transform: scale(1.25);
    при наведении будет применяться мгновенно, без плавной анимации */
    padding: 0 0 0 0;
}
/* ===== Селекторы с псевдоклассами ===== */
/* 1.1. Ховер-эффекты */
.logo-link:hover {
    transform: scale(1.15); /* Масштабирует элемент, увеличивая его в 1.25 раза от исходного размера */
}

/* 2. Заголовок сайта */
.site-title {
    display: inline-block;
    transition: transform 0.3s ease;
    color: #ffffff; /* Задаем белый цвет текста/ссылки white = ffffff */
    font-size: 36pt; /* Размер шрифта (36 пунктов) - 1 пункт (1 pt) равен 1/72 - 36/72 дюйма (0.5 дюйма)" */
    text-decoration: none; /* Убираем подчеркивание у ссылки */
}
/* ===== Селекторы с псевдоклассами ===== */
/* 2.1. Ховер-эффекты */
.site-title:hover {
    color: #ff6b6b;
    transform: scale(1.15);
}
/* 2.2. Активное состояние (нажатие) */
.site-title:active {
    color: #ff0000;
    transform: scale(1.05);
}

/* 3. Иконка для кнопки добавления поста */
.add-post-icon {
    display: inline-block;
    transition: transform 0.3s ease;
}
/* ===== Селекторы с псевдоклассами ===== */
/* 3.1. Ховер-эффекты */
.add-post-icon:hover {
    transform: scale(1.10); /* Увеличение при наведении, как у логотипа */
}

/* 3.2 Стили для SVG внутри иконки добавления */
.add-post-icon svg {
    width: 100px; /* Такой же размер как у логотипа */
    height: auto; /* Сохраняем пропорции */
    vertical-align: middle; /* Выравнивание по вертикали */
}

.add-post-icon svg path {
    fill: #ffffff;  /* Белый цвет, как у текста заголовка */
    transition: fill 0.3s ease;
}

.add-post-icon:hover svg path {
    fill: #ff6b6b;  /* Изменение цвета при наведении */
}

/* 4. Ссылки навигационного меню */
.nav-list a {
    /* ↑ li (элемент списка, контейнер) - .nav-list li - стилизует элементы списка (<li>, например, border: 1px solid red; /* Рамка вокруг КАЖДОГО li */
    /*     ↑ a (ссылка внутри li, интерактивный элемент) - .nav-list a - стилизует ссылки внутри списка (<a>), Мы хотим стилизовать кликабельную область (ссылку) */
    color: #ffffff;
    text-decoration: none;
    transition: all 0.3s ease; /* Добавляем плавный переход */
    display: inline-block; /* Для корректной работы transform */
    padding: 5px 5px; /* Добавьте отступы для лучшего клика */
    /*        ↑    ↑
        вертикаль горизонтально
    padding: 20px - все 4 стороны = 20px;
    padding: 5px 10px - top & bottom: 5px    right & left: 10px;
    padding: 5px 10px 15px - top: 5px, right: 10px, bottom: 15px, eft: 10px (наследуется от horizontal)
    */
}

/* ===== Селекторы с псевдоклассами ===== */
/* 4.1. Ховер-эффекты */
.nav-list a:hover {
    color: #ff6b6b;
    text-decoration: none;
    transform: scale(1.15);
}

/* 4.2. Активное состояние для ссылок (нажатие) */
.nav-list a:active {
    color: #ff0000;
}

/* 5. Изображения флагов */
.flag-icon {
    border: 1px solid #ddd; /* Легкая рамка вокруг флагов */
    border-radius: 3px; /* Слегка скругляем углы рамки */
    transition: transform 0.2s ease;
}
/* ===== Селекторы с псевдоклассами ===== */
/* 5.1. Ховер-эффекты */
.flag-icon:hover {
    transform: scale(1.15);
}


/* Используем container-fluid - полная ширина, чтобы противостоять bootstrap, который автоматически добавляет отступы
если оставить .container. */
.container-fluid {
    background-color: #e9e99f;
    padding: 50px;
    min-height: 100vh; /* Минимальная высота = 100vh = 100% от высоты окна браузера (весь экран) - весь экран vh -
    это Viewport Height (высота области просмотра) */
}

/* CSS построен по принципу группировки селекторов:
Групповые селекторы — через запятую применяют стили к нескольким элементам
Контекстные селекторы — уточняют вложенность (например .post h2 a)
Псевдоклассы — стили для состояний (:hover, :visited, :active) */

h1,
h2,
h3,
h4 {
    font-family: 'Lobster', cursive;
}

/* Это групповой селектор - тоже самое, что написать:
h1 {font-family: 'Lobster', cursive;}
h2 {font-family: 'Lobster', cursive;}
h3 {font-family: 'Lobster', cursive;}
h4 {font-family: 'Lobster', cursive;}
Применяет шрифт 'Lobster' ко всем заголовкам 1-4 уровня

cursive браузер понимает это так: Попробуй загрузить шрифт 'Lobster'
Если не получится → Используй любой стандартный рукописный шрифт, доступный в системе
Если у вас загрузился 'Lobster', то cursive просто игнорируется - отсюда и отсутствие видимых изменений*/

.blog_header {
    color: #ffffff;
    font-size: 3rem;
    /* rem = "root em" - зависит от размера шрифта корневого элемента (<html>)
    По умолчанию в браузерах: 1rem = 16px. Поэтому: 3rem = 3 × 16px = 48px */
    /*font-family: Papyrus;
    font-weight: bold;*/
    display: flex;
    margin-left: 0px;
    margin-bottom: 30px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3)
}

.date {
    color: ##60606d; /* Серый цвет для даты публикации */
}

/* Это контекстный селектор (или селектор потомка)*/
.save {
    float: right;
}
/* в предоставленном HTML-коде действительно нет элемента с классом .save.
Скорее всего, этот CSS-селектор .save предназначен для одного из двух сценариев:
    1. Для будущего использования (заготовка) - Разработчик заранее написал стиль для кнопки "Сохранить", которая может
    появиться позже.
    2. Для другой части сайта - .save может использоваться в другом шаблоне Django, который подключен к этому CSS-файлу
Результат: Кнопка "Сохранить" будет выровнена по правому краю своего контейнера.
Где-то в другом месте сайта, которого нет в предоставленном фрагменте будет:
<form>
    <textarea>Текст поста...</textarea>
    <button class="save">Сохранить изменения</button>
</form>
*/

/* Форма создания поста - растягивает поля на всю ширину
Это контекстный селектор (или селектор потомка)
Ко всем элементам <textarea> и <input>, которые находятся внутри любого элемента с классом .post-form,
применить указанные стили. Как и с .save, это заготовка для будущего - где-то есть/будет форма создания поста*/
.post-form textarea,    /* Первый селектор в группе */
.post-form input {      /* Второй селектор в группе */
    width: 100%;    /* Поля формы занимают 100% ширины контейнера */
}

/* Отступ между постами в блоге */
.post {
    margin-bottom: 50px; /* Большой отступ снизу каждого поста */
}

/* Стили для заголовков постов (ссылок) */
.post h2 a {
    color: #000000; /* Черный цвет в обычном состоянии */
    text-decoration: none;
    display: inline-block; /* ← ЭТО РЕШИТ ПРОБЛЕМУ с неработой transform: scale(1.5) */
    transform-origin: left center;
    transition: all 0.5s ease; /* Добавляем плавный переход */
}

.post h2 a:visited {
    color: #5e5e47; /* Серый цвет даже после посещения */
    text-decoration: none;
}

.post h2 a:hover {
    color: #5e5e47;
    transform: scale(1.25);
}


/* Выравнивание даты и кнопок действий справа в посте - это селектор прямого потомка (child combinator)
Выбери все элементы с классом .date, которые являются прямыми детьми элементов с классом .post"
<article class="post">  <!-- ← Родитель -->
    <time class="date">  <!-- ← ПРЯМОЙ потомок (применится float: right) -->
Чем отличается от обычного пробела (.post .date)?
.post > .date — только прямые дети (1 уровень вложенности)
.post .date — любые потомки (внуки, правнуки и т.д.)
*/
.post > .date,
.post > .actions {  /* .actions — это еще одна CSS-заготовка для будущего элемента! */
    float: right; /* Дата и кнопки справа от текста */
}

/* Стили для secondary кнопок (вероятно, редактирование/удаление) */
.btn-secondary,
.btn-secondary:visited {
    color: #C25100; /* Оранжевый цвет текста */
    background: none; /* Прозрачный фон */
    border-color: #C25100; /* Оранжевая рамка */
    margin-left: 15px; /* Отступ слева между кнопками */
}

/* Состояние hover для secondary кнопок */
.btn-secondary:hover {
    color: #FFFFFF; /* Белый текст при наведении */
    background-color: #C25100; /* Оранжевый фон при наведении */
}