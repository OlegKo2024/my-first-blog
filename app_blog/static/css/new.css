* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

.page-header {
    background-color: #c3c370; /* Цвет фона шапки - C25100 - темно-оранжевый */
    display: flex; /* Включаем Flexbox для выравнивания дочерних элементов. Его дочерние элементы (ссылка с логотипом
    <a> и заголовок <h1>) автоматически становятся flex-элементами и выстраиваются в ряд (по умолчанию) по горизонтали.
    Без этого свойства логотип и заголовок стояли бы друг под другом (как блочные элементы).  */
    align-items: center; /* Выравниваем лого и заголовок по вертикали по центру. Иначе логотип (как изображение) и
    текст выровнялись бы по нижнему краю */
    justify-content: space-between; /* Распределяем пространство между элементами. Первый - в начале, последний - в конце, остальные по центру */
    gap: 50px; /* Добавляем промежуток 50px между логотипом и заголовком
    Без gap это выглядело бы так: [Логотип]________[Заголовок]________[Навигация]. Пробелы между ними были бы равны, но прижатие к краям — строгое
    Gap - это уточняющая команда. Говорит: "Теперь, независимо от того, что сделал space-between, добавь фиксированный промежуток
    в 50px МЕЖДУ КАЖДОЙ ПАРОЙ элементов по горизонтали и имеем: [ (Пустое пространство) Логотип ] [50px] [ Заголовок ] [50px] [ Навигация (Пустое пространство) ]*/
    margin-top: 0; /* Убираем верхний внешний отступ */
    margin-bottom: 0px; /* Добавляем нижний внешний отступ 40px. Это необходимо, чтобы визуально отделить "шапку" от
    следующего за ней контента. Без этого отступа следующий блок будет находиться слишком близко */
    margin-left: 0px;
    margin-right: 0px;
    padding: 20px 20px 20px 40px; /* Внутренние отступы: сверху-справа-снизу-слева
          padding: 20px    20px    20px    40px;
                 │        │        │        │
                 │        │        │        └── Четвертая цифра: левый отступ (padding-left) = 40px
                 │        │        │
                 │        │        └── Третья цифра: нижний отступ (padding-bottom) = 20px
                 │        │
                 │        └── Вторая цифра: правый отступ (padding-right) = 20px
                 │
                 └── Первая цифра: верхний отступ (padding-top) = 20px
        ┌─────────────────────────────────────────────────────────────────────┐
        │                                                                     │
        │  padding-top: 20px                                                  │
        │  ↑                                                                  │
        │  ↓ ┌─────────────────────────────────────────────────────────────┐  │
        │    │ [ЛОГОТИП]                                  My Blog          │  │
        │  ↑ └─────────────────────────────────────────────────────────────┘  │
        │  ↓                                                                  │
        │  padding-bottom: 20px                                               │
        │                                                                     │
        │  ←─── padding-left: 40px ───→│←── content ──→│← padding-right: 20px→│
        │                                                                     │
        └─────────────────────────────────────────────────────────────────────┘*/
}

.page-header h1, /* Обращаемся к самому заголовку <h1> */
.page-header h1 a, /* И к ссылке <a> внутри него в обычном состоянии */
.page-header h1 a:visited, /* И к состоянию после посещения */
.page-header h1 a:active { /* И к активному состоянию (при нажатии) */
    color: #ffffff; /* Задаем белый цвет текста/ссылки white = ffffff */
    font-size: 36pt; /* Размер шрифта (36 пунктов) - 1 пункт (1 pt) равен 1/72 - 36/72 дюйма (0.5 дюйма)" */
    text-decoration: none; /* Убираем подчеркивание у ссылки */
}

/* OR:
.page-header h1,
.page-header h1 a {
    font-size: 36pt;
    text-decoration: none;
}

.page-header h1 a { color: #ffffff; } - Обычная белый цвет по умолчанию
.page-header h1 a:visited { color: #0000ff; } - Посещенная
.page-header h1 a:hover { color: #ffff00; } - При наведении
.page-header h1 a:active { color: #ff0000; } - При нажатии
*/

/* В CSS действует правило: если два селектора применяются к одному и тому же элементу и задают одно и то же свойство
(в вашем случае color, font-size и text-decoration), то браузер выберет стиль от селектора с более высокой специфичностью
    .page-header h1 a — Этот селектор имеет специфичность: (0, 2, 1) (один класс + один тег h1 + один тег a).
    .site-title — Этот селектор имеет специфичность: (0, 1, 0) (один класс).
    Первый селектор "сильнее" второго, поэтому его стили переопределяют стили второго которые просто игнорируются

.site-title {
    color: #ffff00;
    font-size: 3rem;
    text-decoration: none;
}*/

main {
    padding: 10px;
}

.container {
    background-color: #e9e99f;

}

.logo-link {
    display: inline-block; /* позволяет применять к ссылке как к блоку такие свойства, как width, height, padding,
    margin (по вертикали) и border-radius. Если не указать: Ссылка останется строчным элементом - если внутри нее
    картинка или текст, border-radius и transform могут работать некорректно (например, transform не работает */
    border-radius: 8px; /* Для красоты и современного вида, чтобы убрать острые углы у логотипа или его фона.
    Если не указать: Углы элемента останутся острыми (90 градусов)*/
    transition: transform 0.3s ease; /* Указывает браузеру, что изменение свойства transform должно происходить
    не мгновенно, а плавно, в течение 0.3 секунды (300 миллисекунд), с функцией замедления ease (начинается и
    заканчивается анимация медленно, в середине ускоряется). Если не указать: Эффект transform: scale(1.25);
    при наведении будет применяться мгновенно, без плавной анимации */
}

.logo-link:hover {
    transform: scale(1.25); /* Масштабирует элемент, увеличивая его в 1.25 раза от исходного размера */
}

.navigation {
    display: flex; /* Включаем Flexbox и для навигации */
    gap: 1.5rem; /* Очень удобное свойство! Добавляет промежутки *между* ссылками */
}

.navigation a {
    color: white;
    text-decoration: none;
}

.navigation a:hover {
    color: red;
    text-decoration: underline;
    transform: scale(1.25)
}

/* CSS построен по принципу группировки селекторов:
Групповые селекторы — через запятую применяют стили к нескольким элементам
Контекстные селекторы — уточняют вложенность (например .post h2 a)
Псевдоклассы — стили для состояний (:hover, :visited, :active)
Классы — стили для конкретных элементов (.post, .date, .btn-secondary)*/

h1,
h2,
h3,
h4 {
    font-family: 'Lobster', cursive;
}

/* Это групповой селектор - тоже самое, что написать:
h1 {font-family: 'Lobster', cursive;}
h2 {font-family: 'Lobster', cursive;}
h3 {font-family: 'Lobster', cursive;}
h4 {font-family: 'Lobster', cursive;}
Применяет шрифт 'Lobster' ко всем заголовкам 1-4 уровня

cursive браузер понимает это так:
Попробуй загрузить шрифт 'Lobster'
Если не получится → Используй любой стандартный рукописный шрифт, доступный в системе
Если у вас загрузился 'Lobster', то cursive просто игнорируется - отсюда и отсутствие видимых изменений*/

.header-2 {
    color: #ffffff;
    font-size: 1.5rem;
    /* rem = "root em" - зависит от размера шрифта корневого элемента (<html>)
    По умолчанию в браузерах: 1rem = 16px. Поэтому: 3rem = 3 × 16px = 48px */
    display: flex;
    margin-left: 0px;
    margin-bottom: 30px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3)
}

.date {
    color: ##60606d; /* Серый цвет для даты публикации */
}

/* Это контекстный селектор (или селектор потомка)*/
.save {
    float: right;
}
/* в предоставленном HTML-коде действительно нет элемента с классом .save.
Скорее всего, этот CSS-селектор .save предназначен для одного из двух сценариев:
    1. Для будущего использования (заготовка) - Разработчик заранее написал стиль для кнопки "Сохранить", которая может
    появиться позже.
    2. Для другой части сайта - .save может использоваться в другом шаблоне Django, который подключен к этому CSS-файлу
Результат: Кнопка "Сохранить" будет выровнена по правому краю своего контейнера.
Где-то в другом месте сайта, которого нет в предоставленном фрагменте будет:
<form>
    <textarea>Текст поста...</textarea>
    <button class="save">Сохранить изменения</button>
</form>
*/

/* Форма создания поста - растягивает поля на всю ширину
Это контекстный селектор (или селектор потомка)
Ко всем элементам <textarea> и <input>, которые находятся внутри любого элемента с классом .post-form,
применить указанные стили. Как и с .save, это заготовка для будущего - где-то есть/будет форма создания поста*/
.post-form textarea,    /* Первый селектор в группе */
.post-form input {      /* Второй селектор в группе */
    width: 100%;    /* Поля формы занимают 100% ширины контейнера */
}

/* Стили для верхнего меню (вероятно, иконка)
Это групповой селектор с псевдоклассами. это тоже "заготовка" для будущего элемента, которого пока нет в предоставленном HTML
Когда в HTML появится элемент с классом top-menu (скорее всего, это будет ссылка):
<a href="/admin/" class="top-menu">⚙️</a> <!-- Или --> <a href="/new-post/" class="top-menu">+</a>.
К нему автоматически применятся все указанные стили. */
.top-menu,
.top-menu:hover,
.top-menu:visited {
    color: #ffffff; /* Белый цвет */
    float: right; /* Выравнивание справа */
    font-size: 26pt; /* Очень крупный размер */
    margin-right: 20px; /* Отступ справа 20px */
}

/* Отступ между постами в блоге */
.post {
    margin-bottom: 70px; /* Большой отступ снизу каждого поста */
}

/* Стили для заголовков постов (ссылок) */
.post h2 a {
    color: #000000; /* Черный цвет в обычном состоянии */
    text-decoration: none;
    display: inline-block; /* ← ЭТО РЕШИТ ПРОБЛЕМУ с неработой transform: scale(1.5) */
    transform-origin: left center;
    transition: all 0.5s ease; /* Добавляем плавный переход */
}

.post h2 a:visited {
    color: #5e5e47; /* Серый цвет даже после посещения */
    text-decoration: none;
}

.post h2 a:hover {
    color: #5e5e47;
    transform: scale(1.25);
}


/* Выравнивание даты и кнопок действий справа в посте - это селектор прямого потомка (child combinator)
Выбери все элементы с классом .date, которые являются прямыми детьми элементов с классом .post"
<article class="post">  <!-- ← Родитель -->
    <time class="date">  <!-- ← ПРЯМОЙ потомок (применится float: right) -->
Чем отличается от обычного пробела (.post .date)?
.post > .date — только прямые дети (1 уровень вложенности)
.post .date — любые потомки (внуки, правнуки и т.д.)
*/
.post > .date,
.post > .actions {  /* .actions — это еще одна CSS-заготовка для будущего элемента! */
    float: right; /* Дата и кнопки справа от текста */
}

/* Стили для secondary кнопок (вероятно, редактирование/удаление) */
.btn-secondary,
.btn-secondary:visited {
    color: #C25100; /* Оранжевый цвет текста */
    background: none; /* Прозрачный фон */
    border-color: #C25100; /* Оранжевая рамка */
    margin-left: 15px; /* Отступ слева между кнопками */
}

/* Состояние hover для secondary кнопок */
.btn-secondary:hover {
    color: #FFFFFF; /* Белый текст при наведении */
    background-color: #C25100; /* Оранжевый фон при наведении */
}